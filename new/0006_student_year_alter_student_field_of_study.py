# Generated by Django 5.0.6 on 2024-06-06 10:36

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("students", "0005_remove_student_year_alter_student_field_of_study"),
    ]

    operations = [
        migrations.AddField(
            model_name="student",
            name="year",
            field=models.ForeignKey(
                default=1,
                on_delete=django.db.models.deletion.CASCADE,
                to="students.academicyear",
            ),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="student",
            name="field_of_study",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="students.fieldofstudy"
            ),
        ),
    ]

# {% extends "students/base.html" %}

# {% block body %}
# <div class="dropdown">
#     <button class="btn btn-primary dropdown-toggle" type="button" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-expanded="false">
#       Select Year
#     </button>
#     <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton">
#       {% for year, fields in grouped_students.items %}
#       <li class="dropdown-item dropdown-header">{{ year }}</li>
#       {% for field_of_study, students in fields.items %}
#       <li class="dropdown-item">
#         <a href="#" class="dropdown-item">{{ field_of_study }}</a>
#         <ul class="dropdown-menu">
#           {% for student in students %}
#           <li><a class="dropdown-item" href="#">{{ student.first_name }} {{ student.last_name }}</a></li>
#           {% endfor %}
#         </ul>
#       </li>
#       {% endfor %}
#       {% endfor %}
#     </ul>
#   </div>
# {% endblock %}   

# def groups(request):
#     students = Student.objects.all()
#     grouped_students = {}

#     for student in students:
#         year = student.year
#         field_of_study = student.field_of_study
#         if year not in grouped_students:
#             grouped_students[year] = {}
#         if field_of_study not in grouped_students[year]:
#             grouped_students[year][field_of_study] = []
#         grouped_students[year][field_of_study].append(student)

#     return render(request, 'students/groups.html', {
#         'grouped_students': grouped_students
#     })

# def add(request):
#     if request.method == 'POST':
#         form = StudentForm(request.POST)
#         if form.is_valid():
#             new_student_number = form.cleaned_data['student_number']
#             new_first_name = form.cleaned_data['first_name']
#             new_last_name = form.cleaned_data['last_name']
#             new_email = form.cleaned_data['email']
#             new_field_of_study = form.cleaned_data['field_of_study']
#             new_gpa = form.cleaned_data['gpa']


#             new_student = Student(
#                 student_number = new_student_number,
#                 first_name = new_first_name,
#                 last_name = new_last_name,
#                 email = new_email,
#                 field_of_study = new_field_of_study,
#                 gpa = new_gpa,
#             )
#             new_student.save()
#             return render(request, 'students/add.html', {
#                 'form': StudentForm(),
#                 'success': True
#             })
#     else:
#         form = StudentForm()
#     return render(request, 'students/add.html',{
#         'form': StudentForm()
#     })

# def add(request):
#     if request.method == 'POST':
#         form = StudentForm(request.POST)
#         if form.is_valid():
#             form.save()
#             return render(request, 'students/add.html', {
#                 'form': StudentForm(),
#                 'success': True
#             })
#     else:
#         form = StudentForm()
#     return render(request, 'students/add.html', {
#         'form': form
#     })


# def groupslist(request):
#     # Fetch distinct years and fields of study
#     distinct_years = AcademicYear.objects.values_list('name', flat=True).distinct()
#     distinct_fields = FieldOfStudy.objects.values_list('name', flat=True).distinct()

#     return render(request, 'students/groups.html', {
#         'distinct_years': distinct_years,
#         'distinct_fields': distinct_fields
#     })

# def groupslist(request):
#     # Fetch distinct years and fields of study
#     distinct_years = Student.objects.values_list('year', flat=True).distinct()
#     distinct_fields = Student.objects.values_list('field_of_study', flat=True).distinct()

#     # Initialize an empty dictionary to store grouped students
#     grouped_students = {}

#     # Loop over distinct years and fields of study
#     for year in distinct_years:
#         for field in distinct_fields:
#             # Filter students based on the current year and field of study
#             students = Student.objects.filter(year=year, field_of_study=field)
#             # Add the filtered students to the grouped_students dictionary
#             grouped_students[(year, field)] = students

#     return render(request, 'students/groups.html', {
#         'grouped_students': grouped_students,
#         'distinct_years': distinct_years,
#         'distinct_fields': distinct_fields
#     })